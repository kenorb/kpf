<?php

/**
 * Implementation of hook_perm().
 */
function mp_marketplace_perm() {
  return array('act as seller', 'administer sellers');
}

/**
 * Implementation of hook_menu().
 */
function mp_marketplace_menu() {
  $items = array();

  $items['user/%user/selling'] = array(
    'title' => 'Selling',
    'description' => 'View and manage your products and orders.',
    'page callback' => 'mp_marketplace_selling_overview',
    'page arguments' => array(1),
    'access callback' => 'mp_marketplace_can_view_seller',
    //'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'mp_marketplace.admin.inc',
  );
  $items['user/%user/selling/overview'] = array(
    'title' => 'Summary',
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/store/settings/seller'] = array( 
    'title' => 'Seller settings',
    'access arguments' => array('administer sellers'),
    'description' => 'Configure the marketplace seller settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mp_marketplace_settings_seller_form'),
    'file' => 'mp_marketplace.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_user().
 */
function mp_marketplace_user($op, &$edit, &$account, $category = NULL) {

  global $user;
  switch ($op) {
    case 'view':
      if (user_access('act as seller') && $user->uid == $account->uid) {
        $links = array();
        if (module_exists(mp_orders) && user_access('fulfill own orders')) {
          $links['fulfill']['#type'] = 'user_profile_item';
          $links['fulfill']['#value'] = l(t('Click here to fulfill your orders.'), 'user/'. $account->uid .'/selling/fulfill');
        }
        if (user_access('view own products')) {
          $links['products']['#type'] = 'user_profile_item';
          $links['products']['#value'] = l(t('Click here to view your products.'), 'user/'. $account->uid .'/selling/view');
          $links['overview']['#type'] = 'user_profile_item';
          $links['overview']['#value'] = l(t('Click here for your sales overview.'), 'user/'. $account->uid .'/selling');
        }
        if (!empty($links)) {
          $account->content['products'] = array(
            '#type' => 'user_profile_category',
            '#title' => t('Selling'),
            $links,
          );
        }
      }
      break;
  }
}

/**
 * Implements hook_form_alter().
 */
function mp_marketplace_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    // Add a "to do" checklist to UC Marketplace's primary setting's page 
    case 'mp_marketplace_settings_seller_form':
      $form['mp_marketplace'] = array(
        '#type' => 'markup',
        '#value' => mp_marketplace_admin(),
      );
      break;
  }

  return $form;
}

function mp_marketplace_admin() {
  
  $results = module_invoke_all('marketplace_status');

  foreach ($results as $message) {
    switch ($message['status']) {
      case 'warning':
        $icon = base_path() . drupal_get_path('module', 'uc_store') .'/images/alert.gif';
        break;
      case 'error':
        $icon = base_path() . drupal_get_path('module', 'uc_store') .'/images/error.gif';
        break;
      case 'ok':
      default:
        $icon = base_path() . drupal_get_path('module', 'uc_store') .'/images/info.gif';
    }

    $rows[] = array('data' => array(
      array('data' => '<img src="'. $icon .'" />'),
      array('data' => '<strong>'. $message['title'] .'</strong>', 'nowrap' => 'nowrap'),
      array('data' => $message['desc'], 'width' => '100%')), 'valign' => 'top');
  }

  $header = array('&nbsp;', t('Title'), t('Description'));

  $output .= '<br /><br /><br /><div style="clear: both;"><strong>'. t('Status messages:') .'</strong>'
           . theme('table', $header, $rows) .'</div>';

  return $output;
}

/**
 * Implements marketplace_status().
 */
function mp_marketplace_marketplace_status() {
  $checklist = array();
  
  // CCK filefield
  if (module_exists('mp_file')) {
    $field_name = 'field_'. variable_get('mp_file_field_name', 'download');
    $field = content_fields($field_name);
    
    if (empty($field) || $field['type'] != 'filefield') {
      $status = 'warning';
      $description = t($field_name . ' is not a valid product filefield.');
    }
    else {
      $status = 'ok';
      $description = t($field_name . ' is a valid product filefield.');
    }

    $checklist[] = array('status' => $status, 'title' => t('Downloads'), 'desc' => $description);
  }
  
  // Packing slip
  if (module_exists('mp_quote')) {
    $packingslip = base_path() . drupal_get_path('module', 'uc_order') .'/templates/packingslip.itpl.php';
  
    if (!file_exists($_SERVER{'DOCUMENT_ROOT'} . $packingslip)) {
      $status = 'warning';
      $description = t('packingslip.itpl.php does not exist');
    }
    else {
      $status = 'ok';
      $description = t('packingslip.itpl.php exists');
    }
  
    $checklist[] = array('status' => $status, 'title' => t('packingslip'), 'desc' => $description);
  }
  
  // Paypal API
  if (module_exists('uc_paypal')) {
    $paypal_api = variable_get('uc_paypal_api_username', '');
    if (!empty($paypal_api)) {
      $status = 'ok';
      $description = t('Paypal API credentials configured.');
    }
    else {
      $status = 'warning';
      $description = t('Paypal API credentials have not been configured.');
    }
  
    $checklist[] = array('status' => $status, 'title' => t('Paypal WPP'), 'desc' => $description);
  }
  
  // Shipping patches applied
//   $filename = base_path() . drupal_get_path('module', 'uc_shipping') .'/uc_shipping.module';
//   $filecontents = file_get_contents($_SERVER{'DOCUMENT_ROOT'} . $filename);
//   
//   if (preg_match("/module_invoke_all\('package',/i", $filecontents)) {
//     $status = 'ok';
//     $description = t('Shipping patches have been applied.');
//   }
//   else {
//     $status = 'warning';
//     $description = t('Shipping patches have not been applied.');
//   }
// 
//   $checklist[] = array('status' => $status, 'title' => t('Shipping Patch'), 'desc' => $description);

  return $checklist;
}

function mp_marketplace_can_view_seller() {
  global $user;
  
  // mp_reports and this function probably need restructuring
  // For now let's add conditionals for clarity
  if (user_access('administer sellers')) {
    return TRUE;
  }
  elseif (user_access('act as seller') && ($user->uid == arg(1))) {
    switch (arg(3)) {
      case '':
        return TRUE;
      case 'view':
        return user_access('view own products');
      case 'settings':                            // From mp_quote
        return user_access('view own products');  // Seems wrong but consistent with the way it has been
      default:
        return TRUE;
    }
  }
  else {
    return FALSE;
  }
}