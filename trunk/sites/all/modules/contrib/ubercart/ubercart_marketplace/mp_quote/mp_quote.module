<?php

/**
 * @file
 * Handles Ubercart Marketplace shipping quotes.
 *
 * Allows sellers to customize shipping settings for their products
 * and receive payment for their shipping charges as calculated by
 * the quote this module returns
 */

/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/

/**
 * Implementation of hook_menu().
 */
function mp_quote_menu() {
  $items = array();

  $items['user/%user/selling/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure your shipping settings.',
    'access callback' => 'mp_marketplace_can_view_seller',
    //'access arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mp_quote_seller_settings', 1),
    'weight' => 20,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/store/settings/quotes/methods/mpquote'] = array(
    'title' => 'Marketplace Quote',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mp_quote_admin_methods'),
    'access arguments' => array('configure quotes'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

function mp_quote_admin_methods() {
  $form = array();
  
  $form['mp_quote_flatrate_id'] = array('#type' => 'textfield',
    '#title' => t('Flat Rate ID'),
    '#description' => t('The numeric id of the existing flat rate method that is to be used if sellers choose flat rate as a product\'s shipping method. This can be determined by inspecting the last argument of the url to edit the flat rate method (admin/store/settings/quotes/methods/flatrate). This flat rate method should NOT be enabled as a quote method, as it will be invoked by mp_quote and should not be invoked separately or in duplication.'),
    '#default_value' => variable_get('mp_quote_flatrate_id', 1),
  );
  
  return system_settings_form($form);
}

 /**
 * Implementation of hook_form_alter().
 *
 * Auto fills new product location fields, and allows seller to choose
 * quote method if mp_quote shipping method is enabled.
 */
function mp_quote_form_alter(&$form, $form_state, $form_id) {
  $node = $form['#node'];
  if (is_object($node)) {
    $product_types = module_invoke_all('product_types');
    if (module_exists('uc_product_kit')) {
      unset($product_types[array_search('product_kit', $product_types)]);
    }
    if ($form_id == $node->type .'_node_form' && in_array($node->type, $product_types)) {
      if (empty($node->nid)) {  // new Product
        global $user;
        $seller = db_fetch_object(db_query("SELECT * FROM {mp_quote_sellers} WHERE uid = %d", $user->uid));
        $form['shipping']['default_address']['first_name']['#default_value'] = $seller->first_name;
        $form['shipping']['default_address']['last_name']['#default_value'] = $seller->last_name;
        $form['shipping']['default_address']['company']['#default_value'] = $seller->company;
        $form['shipping']['default_address']['street1']['#default_value'] = $seller->street1;
        $form['shipping']['default_address']['street2']['#default_value'] = $seller->street2;
        $form['shipping']['default_address']['city']['#default_value'] = $seller->city;
        $form['shipping']['default_address']['zone']['#default_value'] = $seller->zone;
        $form['shipping']['default_address']['postal_code']['#default_value'] = $seller->postal_code;
        $form['shipping']['default_address']['country']['#default_value'] = $seller->country;
      }

      $enabled = variable_get('uc_quote_enabled', array());
      if ($enabled['mp_quote']) {
        $form['shipping']['quote_method'] = array(
          '#type' => 'radios',
          '#title' => t('Shipping quote method'),
          '#required' => TRUE,
          '#default_value' => $node->quote_method,
          '#options' => array(t('Flat Rate'), t('USPS')),
        );
        $form['#submit'][] = 'mp_quote_node_submit';
      }
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function mp_quote_nodeapi(&$node, $op, $a3 = NULL) {
  $product_types = module_invoke_all('product_types');
  if (module_exists('uc_product_kit')) {
    unset($product_types[array_search('product_kit', $product_types)]);
  }
  if (in_array($node->type, $product_types)) {
    switch ($op) {
      case 'load':
        // Override store default address if no product specific address was found.
        $address = db_fetch_object(db_query("SELECT first_name, last_name, company, street1, street2, city, zone, postal_code, country, phone FROM {uc_quote_product_locations} WHERE nid = %d", $node->nid));
        if ($address === FALSE) {
          $address = db_fetch_object(db_query("SELECT first_name, last_name, company, street1, street2, city, zone, postal_code, country, phone FROM {mp_quote_sellers} WHERE uid = %d", $node->uid));
          if ($address !== FALSE) {
            return array('shipping_address' => $address);
          }
        }
        return array();
      break;

      case 'prepare':
        $quote_method = db_result(db_query("SELECT quote_method FROM {mp_quote_products} WHERE nid = %d", $node->nid));
        if ($quote_method === FALSE) {
          db_query("INSERT INTO {mp_quote_products} (nid) VALUES (%d)", $node->nid);
        }
        $node->quote_method = $quote_method;
      break;
    }
  }
}

function mp_quote_node_submit($form, &$form_state) {
  $node = $form['#node'];
  db_query("UPDATE {mp_quote_products} SET quote_method = '%s' WHERE nid = %d", $form_state['values']['quote_method'], $node->nid);
}

function mp_quote_seller_settings($form_state, $account) {
  $address = db_fetch_object(db_query("SELECT * FROM {mp_quote_sellers} WHERE uid = %d", $account->uid));
  
  $form = array();
  
  $form['default_address'] = array(
    '#type' => 'fieldset',
    '#title' => t('Default shipping address'),
    '#attributes' => array('class' => 'product-shipping'),
  );
  $form['default_address']['first_name'] = uc_textfield(uc_get_field_name('first_name'), $address->first_name, FALSE);
  $form['default_address']['last_name'] = uc_textfield(uc_get_field_name('last_name'), $address->last_name, FALSE);
  $form['default_address']['company'] = uc_textfield(uc_get_field_name('company'), $address->company, FALSE);
  $form['default_address']['street1'] = uc_textfield(uc_get_field_name('street1'), $address->street1, FALSE, NULL, 64);
  $form['default_address']['street2'] = uc_textfield(uc_get_field_name('street2'), $address->street2, FALSE, NULL, 64);
  $form['default_address']['city'] = uc_textfield(uc_get_field_name('city'), $address->city, FALSE);
  $form['default_address']['zone'] = uc_zone_select(uc_get_field_name('zone'), $address->zone, NULL, $country);
  $form['default_address']['postal_code'] = uc_textfield(uc_get_field_name('postal_code'), $address->postal_code, FALSE, NULL, 10, 10);
  $form['default_address']['country'] = uc_country_select(uc_get_field_name('country'), $address->country);

  if (user_access('administer sellers')) {
    $form['default_address']['update_products'] = array(
      '#type' => 'checkbox',
      '#title' => t('Update shipping address on all products belonging to this user.'),
      '#default_value' => FALSE,
    );
  }
  
  $form['markup_amount'] = array(
    '#type' => 'textfield',
    '#default_value' => $address->markup_rate,
    '#title' => t('Markup Amount'),
    '#size' => 10,
    '#description' => t('Enter a numeric value to be added to shipping quotes retrieved in real-time (i.e. USPS live rates). The purpose of this markup is to cover packaging or handling costs.'),
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  
  return $form;
}

function mp_quote_seller_settings_validate($form, &$form_state) {
  $pattern = '/^\d*(\.\d*)?$/';
  if (!is_numeric($form_state['values']['markup_amount']) && !preg_match($pattern, $form_state['values']['markup_amount'])) {
    form_set_error('markup_amount', t('Please enter a valid markup amount'));
  }
}

function mp_quote_seller_settings_submit($form, &$form_state) {
  $account = $form['#parameters'][2];
  
  db_query("DELETE FROM {mp_quote_sellers} WHERE uid = %d", $account->uid);
  db_query("INSERT INTO {mp_quote_sellers} (uid, first_name, last_name, company, street1, street2, city, zone, postal_code, country, markup_rate) VALUES (%d, '%s', '%s', '%s', '%s', '%s', '%s', %d, '%s', %d, %f)",
    $account->uid, $form_state['values']['first_name'], $form_state['values']['last_name'], $form_state['values']['company'], $form_state['values']['street1'], $form_state['values']['street2'], $form_state['values']['city'], $form_state['values']['zone'], $form_state['values']['postal_code'], $form_state['values']['country'], $form_state['values']['markup_amount']
  );

  if (user_access('administer sellers') && $form_state['values']['update_products']) {
    db_query("UPDATE {uc_quote_product_locations} SET first_name = '%s', last_name = '%s', company = '%s', street1 = '%s', street2 = '%s', city = '%s', zone = %d, postal_code = '%s', country = %d WHERE nid IN (SELECT nid FROM {node} WHERE uid = %d)", $form_state['values']['first_name'], $form_state['values']['last_name'], $form_state['values']['company'], $form_state['values']['street1'], $form_state['values']['street2'], $form_state['values']['city'], $form_state['values']['zone'], $form_state['values']['postal_code'], $form_state['values']['country'], $account->uid);
  }
  
  drupal_set_message(t('Settings saved'));
}

/**
 * Implementation of hook_ca_predicate().
 *
 * Connect the quote action with the quote event.
 */
function mp_quote_ca_predicate() {
  $enabled = variable_get('uc_quote_enabled', array());
  $predicates = array();
  
  $predicates['mp_quote_get_quote'] = array(
    '#title' => t('Shipping quote via mp_quote'),
      '#trigger' => 'get_quote_from_mp_quote',
      '#class' => 'mp_quote',
      '#status' => $enabled['mp_quote'],
      '#actions' => array(
      array(
        '#name' => 'uc_quote_action_get_quote',
        '#title' => t('Fetch a marketplace shipping quote.'),
        '#argument_map' => array(
          'order' => 'order',
          'method' => 'method',
        ),
      ),
    ),
  );

  return $predicates;
}

/**
 * Implementation of Ubercart's hook_shipping_method().
 */
function mp_quote_shipping_method() {
  $methods = array();

  $enabled = variable_get('uc_quote_enabled', array());
  $weight = variable_get('uc_quote_method_weight', array());
  $methods['mp_quote'] = array(
    'id' => 'mp_quote',
    'module' => 'mp_quote',
    'title' => 'mp_quote',
    'enabled' => $enabled['mp_quote'],
    'quote' => array(
      'type' => 'order',
      'callback' => 'mp_quote_quote',
      'accessorials' => array('Shipping' => t('Shipping')),
    ),
    'weight' => $weight['mp_quote'],
  );

  return $methods;
}

/**
 * Callback for retrieving a multi vendor shipping quote.
 *
 * Request a quote on a per vendor basis. Therefore, the quote will
 * take longer to display if many vendors have products in user cart.
 *
 * @param $products
 *   Array of cart contents.
 * @param $details
 *   Order details other than product information.
 * @return
 *   JSON object containing rate, error, and debugging information.
 */
function mp_quote_quote($products, $details) {
  unset($_SESSION['mp_quote_rate']);
  // pbv = products by vendor
  // sort products into an array by vendor, so operations can be performed on a per vendor basis
  $pbv = array();
  foreach ($products as $product) {
    $quote_method = db_result(db_query("SELECT quote_method FROM {mp_quote_products} WHERE nid = %d", $product->nid));
    $pbv[$product->uid][$quote_method][] = $product;
  }
  
  // drupal_set_message('<pre>'. print_r($pbv, TRUE) .'</pre>');
  
  $sqr = 0;
  // sqr = shipping quote rate
  // vp = vendor's products
  // loop through vendors and perform operations (i.e. shipping calculations)
  foreach ($pbv as $uid => $vp) {
    $quotes = array();
    // retrieve a shipping quote for this vendor's products based on methods selected
    
    // ===FLAT RATE QUOTE METHOD===
    if (isset($pbv[$uid][0])) {
      $flatrate_name = 'flatrate_'. variable_get('mp_quote_flatrate_id', 1);
      $quote = uc_flatrate_quote($pbv[$uid][0], $details, array('id' => $flatrate_name));
      if (empty($quote)) { // return if error retrieving quote
        return $quote;
      }
      $sqr += $quote[0]['rate'];
      $_SESSION['mp_quote_rate'][$uid] += $quote[0]['rate'];
    }
    
    // ===USPS QUOTE METHOD===
    if (isset($pbv[$uid][1])) {
      $quote = uc_usps_quote($pbv[$uid][1], $details, array('id' => 'usps'));
      if (empty($quote)) { // return if error retrieving quote
        return $quote;
      }
      $markup_rate = db_result(db_query("SELECT markup_rate FROM {mp_quote_sellers} WHERE uid = %d", $uid));
      $sqr += $quote[1]['rate'] + $markup_rate; // 1 = USPS Priority Mail Service Code (Ubercart)
      $_SESSION['mp_quote_rate'][$uid] += $quote[1]['rate'] + $markup_rate;
    }
    
  }
  
  $quotes['Shipping'] = array('rate' => $sqr, 'format' => uc_currency_format($sqr), 'option_label' => t('Shipping'));
  
  return $quotes;
}

/**
 * Implementation of Ubercart's hook_order().
 * 
 * Saves the shipping rates per seller to db
 */
function mp_quote_order($op, &$order, $arg2)  {
  if ($op == 'submit') {
    foreach ($_SESSION['mp_quote_rate'] as $uid => $rate) {
      db_query("INSERT INTO {mp_quote_shipping_rates} (uid, order_id, rate) VALUES (%d, %d, %f)", $uid, $order->order_id, $rate); 
    }
    unset($_SESSION['mp_quote_rate']);
  }
}